% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/az_vm_template.R
\docType{class}
\name{az_vm_template}
\alias{az_vm_template}
\title{Virtual machine template class}
\format{An R6 object of class \code{az_vm_template}, inheriting from \code{AzureRMR::az_template}.}
\usage{
az_vm_template
}
\description{
Class representing a virtual machine template. This class keeps track of all resources that are created as part of deploying a VM, and exposes methods for managing it. You should use this class for all VM interactions.
}
\details{
A virtual machine in Azure is actually a collection of resources, including any and all of the following:
\itemize{
\item Storage account
\item Network interface
\item Network security group
\item Virtual network
\item IP address
\item The VM itself
}

By wrapping the deployment template used to create a VM, the \code{az_vm_template} class allows managing all of these resources as a single unit.
}
\section{Methods}{

The following methods are available, in addition to those provided by the \link[AzureRMR:az_template]{AzureRMR::az_template} class:
\itemize{
\item \code{new(...)}: Initialize a new VM object. See 'Initialization' for more details.
\item \code{start(wait=TRUE)}: Start the VM. By default, wait until the startup process is complete.
\item \code{stop(deallocate=TRUE, wait=FALSE)}: Stop the VM. By default, deallocate it as well.
\item \code{restart(wait=TRUE)}: Restart the VM.
\item \code{run_deployed_command(command, parameters, script)}: Run a PowerShell command on the VM.
\item \code{run_script(script, parameters)}: Run a script on the VM. For a Linux VM, this will be a shell script; for a Windows VM, a PowerShell script. Pass the script as a character vector.
\item \code{sync_vm_status()}: Update the VM status fields in this object with information from the host.
}
}

\section{Fields}{

The following fields are available, in addition to those provided by the \code{AzureRMR::az_template} class:
\itemize{
\item \code{disks}: The status of any attached disks.
\item \code{ip_address}: The IP address of the VM. NULL if the VM is currently deallocated.
\item \code{dns_name}: The fully qualified domain name of the VM.
\item \code{status}: The status of the VM. This is a vector containing up to two elements: the provisioning state, and the power state.
}
}

\section{Initialization}{

Initializing a new object of this class can either retrieve an existing VM template, or deploy a new VM template on the host. Generally, the best way to initialize an object is via the \code{get_vm}, \code{create_vm} or \code{list_vms} methods of the \link{az_subscription} and \link{az_resource_group} class, which handle the details automatically.

A new VM can be created in \emph{exclusive} mode, meaning a new resource group is created solely to hold the VM. This simplifies deleting a VM considerably, as deleting the resource group will also automatically delete all the VM's resources. This can be done asynchronously, meaning that the \code{delete()} method returns immediately while the process continues on the host. Otherwise, deleting a VM will explicitly delete each of its resources, a task that must be done synchronously to allow for dependencies.
}

\seealso{
\link[AzureRMR:az_resource]{AzureRMR::az_resource}, \link{create_vm}, \link{get_vm}
\href{https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines}{VM API reference}
}
\keyword{datasets}
